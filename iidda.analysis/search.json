[{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/articles/flexi_filter.html","id":"what-is-flexi_filter-for","dir":"Articles","previous_headings":"","what":"What is flexi_filter for?","title":"flexi_filter","text":"International Infectious Disease Data Archive (IIDDA) api designed allow users obtain filtered subsets data. function iidda.analysis::flexi_filter enables filtering IIDDA datasets regex queries. flexi_filter [currently] bare-bones; searches involve filtering one field simultaneously usually handled joining results two separate calls flexi_filter.","code":""},{"path":[]},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/articles/flexi_filter.html","id":"what-you-can-search","dir":"Articles","previous_headings":"","what":"What you can search","title":"flexi_filter","text":"flexi_filter can query fields different types IIDDA datasets. type dataset queried specified argument response_type, can take values \"metadata\" metadata headers flat datafile, \"columns\" field names flat data files , \"data_dictionary\" definitions field names either flat data files associated metadata.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/articles/plot_rohani.html","id":"plotting-infectious-disease-time-series","dir":"Articles","previous_headings":"","what":"Plotting Infectious Disease Time-Series","title":"plot_rohani","text":"(Disclaimer – yet read much visualization specifically epidemiological data, likely treating topic naively. point document start discussion make start specifications plotting functions iidda.analysis)","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/articles/plot_rohani.html","id":"example-data","dir":"Articles","previous_headings":"Plotting Infectious Disease Time-Series","what":"Example Data","title":"plot_rohani","text":"Throughout use communicable disease incidence data Canada 1956. focal example within data weekly measles counts broken province. get sense data, plot province Ontario.","code":"library(iidda.api) ## Loading required package: readr ## Loading required package: httr ## Loading required package: iidda ## Loading required package: dplyr ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union ## Loading required package: jsonlite ## Loading required package: tibble ## Loading required package: tidyr ## Loading required package: rapiclient raw = iidda.api::ops_staging$raw_csv(dataset_ids = \"cdi_ca_1956_wk_prov_dbs\") ## Now converting some fields from character to numeric or date.  ## You can turn this off with ## options(iidda_api_all_char = TRUE).  ## Do not display any iidda.api messages with ## options(iidda_api_msgs = FALSE). ## Messages displayed at most once per R session. ## Now sorting by date.  ## You can turn this off with ## options(iidda_api_date_sort = FALSE).  ## Do not display any iidda.api messages with ## options(iidda_api_msgs = FALSE). ## Messages displayed at most once per R session. ## Warning: 947 parsing failures. ## row col expected         actual ##  27  -- a number Not reportable ##  38  -- a number Not reportable ##  39  -- a number Not reportable ##  49  -- a number Not reportable ##  50  -- a number Not reportable ## ... ... ........ .............. ## See problems(...) for more details. ## Warning: 1205 parsing failures. ## row col expected         actual ##  10  -- a number Not reportable ##  27  -- a number Not reportable ##  38  -- a number Not reportable ##  39  -- a number Not reportable ##  49  -- a number Not reportable ## ... ... ........ .............. ## See problems(...) for more details. ## Warning: 1208 parsing failures. ## row col expected         actual ##   9  -- a number Not reportable ##  10  -- a number Not reportable ##  27  -- a number Not reportable ##  38  -- a number Not reportable ##  39  -- a number Not reportable ## ... ... ........ .............. ## See problems(...) for more details. raw ## # A tibble: 16,016 × 15 ##    cases_cum_median_prev_5_years cases_cum_prev_year cases_cum_report_year ##                            <dbl>               <dbl>                 <dbl> ##  1                          1415                 921                   927 ##  2                            NA                  NA                    NA ##  3                            NA                  NA                    NA ##  4                            NA                  NA                    NA ##  5                            NA                  NA                    NA ##  6                            NA                  NA                    NA ##  7                            NA                  NA                    NA ##  8                            NA                  NA                    NA ##  9                            NA                  NA                    NA ## 10                            NA                  NA                    NA ## # ℹ 16,006 more rows ## # ℹ 12 more variables: cases_median_prev_5_years <dbl>, ## #   cases_prev_period <dbl>, cases_this_period <dbl>, digitization_id <chr>, ## #   historical_disease <chr>, historical_disease_subclass <chr>, ## #   location <chr>, location_type <chr>, period_end_date <date>, ## #   period_start_date <date>, scan_id <chr>, time_scale <chr> library(dplyr) measles = (raw   %>% filter(tolower(historical_disease) == \"measles\")   %>% filter(time_scale == \"wk\", location_type == \"province\")   %>% select(location, period_start_date, cases_this_period)   %>% mutate(period_start_date = as.Date(period_start_date))   %>% mutate(cases_this_period = as.numeric(cases_this_period)) ) measles ## # A tibble: 520 × 3 ##    location period_start_date cases_this_period ##    <chr>    <date>                        <dbl> ##  1 NFLD.    1956-01-01                       55 ##  2 P.E.I.   1956-01-01                       69 ##  3 N.S      1956-01-01                       86 ##  4 N.B.     1956-01-01                        0 ##  5 QUE.     1956-01-01                       95 ##  6 ONT.     1956-01-01                     1188 ##  7 MAN.     1956-01-01                       11 ##  8 SASK.    1956-01-01                        1 ##  9 ALTA.    1956-01-01                       47 ## 10 B.C.     1956-01-01                       22 ## # ℹ 510 more rows with(   filter(measles, location == \"ONT.\"),    plot(period_start_date, cases_this_period, type = \"l\") )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/articles/plot_rohani.html","id":"generalizing-rohani-earn-and-grenfell","dir":"Articles","previous_headings":"Plotting Infectious Disease Time-Series","what":"Generalizing Rohani, Earn, and Grenfell","title":"plot_rohani","text":"Rohani, Earn, Grenfell (1999) developed method plotting time series cases disease, broken geographic location. geographic locations ordered along one y-axes plot population size. generalize plot allowing geographic location ordinal grouping variable. additionally generalize allowing cases positive variable can meaningfully summed observed times within levels grouping variable. data structure contain information required make plot consists two tables; one generalized cases variable (call series data) one generalized geographical location variable (call grouping table). measles data can get series generalization one construct function produce plots. Note assuming TODO: graphs: https://ms.mcmaster.ca/earn.old/pdfs/KrylEarn2020_PLoSBiology_SmallpoxLondon.pdf https://ms.mcmaster.ca/earn.old/pdfs/Tien+2011_JRSI_CholeraHeraldWaves.pdf","code":"##' Plot Rohani Diagram ##' ##' @param series_col Name of column in \\code{data_series} giving the numerical  ##' variable of interest (e.g. numbers of cases). ##' @param time_col Name of column in \\code{data_series} giving a date-time  ##' variable to plot on the x-axis. ##' @param grouping_col Name of column in both \\code{data_series} and  ##' \\code{data_groups} giving the labels of the grouping variable. This  ##' variable will be unique in \\code{data_groups}, but will be repeated in ##' \\code{data_series} over the different time periods. plot_rohani = function(   series_col,    time_col,    grouping_col,    ranking_col,    data_series,    data_groups )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steven Walker. Maintainer.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Walker S (2025). iidda.analysis: Tools Analyzing IIDDA Datasets. R package version 1.0.0.","code":"@Manual{,   title = {iidda.analysis: Tools for Analyzing IIDDA Datasets},   author = {Steven Walker},   year = {2025},   note = {R package version 1.0.0}, }"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/index.html","id":"iidda-analysis-r-package","dir":"","previous_headings":"","what":"Tools for Analyzing IIDDA Datasets","title":"Tools for Analyzing IIDDA Datasets","text":"iidda.analysis package contains functions visualization, analysis, harmonization iidda datasets. package stable. likely interested iidda.api package.","code":""},{"path":[]},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/index.html","id":"stable-version","dir":"","previous_headings":"Installation","what":"Stable Version","title":"Tools for Analyzing IIDDA Datasets","text":"","code":"install.packages(c(\"iidda.analysis\")   , repos = c(       \"https://canmod.r-universe.dev\"     , \"https://cran.r-project.org\"   ) )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/index.html","id":"developer-version","dir":"","previous_headings":"Installation","what":"Developer Version","title":"Tools for Analyzing IIDDA Datasets","text":"","code":"remotes::install_github('canmod/iidda-tools', subdir = 'R/iidda.analysis')"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/ComputeMovingAverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Moving Average of Time Series — ComputeMovingAverage","title":"Compute Moving Average of Time Series — ComputeMovingAverage","text":"Compute Moving Average Time Series","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/ComputeMovingAverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Moving Average of Time Series — ComputeMovingAverage","text":"","code":"ComputeMovingAverage(ma_window_length = 52)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/ComputeMovingAverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Moving Average of Time Series — ComputeMovingAverage","text":"ma_window_length length moving average window, depend time scale data. Defaults 52, weekly data averaged years.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/ComputeMovingAverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Moving Average of Time Series — ComputeMovingAverage","text":"function remove compute moving average time series variable ## Returned Function - Arguments    * `data` data frame containing time series data    * `series_variable` column name series variable `data`, default \"deaths\"    * `time_variable` column name time variable `data`, default \"period_end_date\" - Return - fields `data` `series_variable` data replaced moving average.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/HandleMissingValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Missing Values in Series Variable — HandleMissingValues","title":"Handle Missing Values in Series Variable — HandleMissingValues","text":"Remove replace values NA.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/HandleMissingValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Missing Values in Series Variable — HandleMissingValues","text":"","code":"HandleMissingValues(na_remove = FALSE, na_replace = NULL)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/HandleMissingValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Missing Values in Series Variable — HandleMissingValues","text":"na_remove boolean value, `TRUE` remove `NA`s series variable na_replace numeric value replace `NA`s series variable, NULL replacement performed","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/HandleMissingValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle Missing Values in Series Variable — HandleMissingValues","text":"function remove replace missing values. ## Returned Function - Arguments    * `data` data frame containing time series data    * `series_variable` column name series variable `data`, default \"deaths\" - Return - fields `data` either `NA` records removed replaced","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/HandleZeroValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Zero Values in Series Variable — HandleZeroValues","title":"Handle Zero Values in Series Variable — HandleZeroValues","text":"Remove replace series variable values zero.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/HandleZeroValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Zero Values in Series Variable — HandleZeroValues","text":"","code":"HandleZeroValues(zero_remove = FALSE, zero_replace = NULL)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/HandleZeroValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Zero Values in Series Variable — HandleZeroValues","text":"zero_remove boolean value, `TRUE` remove zeroes series variable zero_replace numeric value replace zeroes series variable, NULL replacement performed","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/HandleZeroValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle Zero Values in Series Variable — HandleZeroValues","text":"function remove replace zero values. ## Returned Function - Arguments    * `data` data frame containing time series data    * `series_variable` column name series variable `data`, default \"deaths\" - Return - fields `data` either zero records removed replaced","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/PeriodAggregator.html","id":null,"dir":"Reference","previous_headings":"","what":"Period Aggregator — PeriodAggregator","title":"Period Aggregator — PeriodAggregator","text":"Create function aggregates information time periods, normalizes count variable, creates new fields summarize information.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/PeriodAggregator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Period Aggregator — PeriodAggregator","text":"","code":"PeriodAggregator(   time_variable = \"period_mid_time\",   period_width_variable = \"num_days\",   count_variable = \"cases_this_period\",   norm_variable = \"population_reporting\",   rate_variable = \"daily_rate\",   norm_exponent = 5 )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/PeriodAggregator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Period Aggregator — PeriodAggregator","text":"time_variable Name variable characterize temporal location time period. period_width_variable Name variable characterize width time period. count_variable Name variable characterize count variable normalized. norm_variable Name variable used normalize count variable. rate_variable Name variable used store normalized count variable. norm_exponent Exponent use normalization. default `5`, means `per 100,000`.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/SeriesHarmonizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Wavelet Series Harmonizer — SeriesHarmonizer","title":"Wavelet Series Harmonizer — SeriesHarmonizer","text":"Harmonizes series variable `data` one data value time unit time variable (account different variations disease/cause name)","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/SeriesHarmonizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wavelet Series Harmonizer — SeriesHarmonizer","text":"","code":"SeriesHarmonizer(time_variable = \"period_end_date\", series_variable = \"deaths\")"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/SeriesHarmonizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wavelet Series Harmonizer — SeriesHarmonizer","text":"time_variable column name time variable `data`, default \"period_end_date\" series_variable column name series variable `data`, default \"deaths\"","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/SeriesHarmonizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wavelet Series Harmonizer — SeriesHarmonizer","text":"function harmonize disease/cause names ## Returned Function - Arguments    * `data` data frame containing time series data - Return - fields `data` summarized series variable unique time variable","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/TimeScalePicker.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Scale Picker — TimeScalePicker","title":"Time Scale Picker — TimeScalePicker","text":"Time Scale Picker","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/TimeScalePicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Scale Picker — TimeScalePicker","text":"","code":"TimeScalePicker(   time_scale_variable = \"time_scale\",   time_group_variable = \"year\" )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/TimeScalePicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Scale Picker — TimeScalePicker","text":"time_scale_variable Variable identifying time scale records. values variable things like `\"wk\"`, `\"mo\"`, `\"yr\"`. time_group_variable Variable identifying grouping variable time scales (e.g. column identifying year.).","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/TrimSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim Time Series — TrimSeries","title":"Trim Time Series — TrimSeries","text":"Remove leading trailing zeroes time series data set.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/TrimSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim Time Series — TrimSeries","text":"","code":"TrimSeries(zero_lead = FALSE, zero_trail = FALSE)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/TrimSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim Time Series — TrimSeries","text":"zero_lead boolean value, `TRUE` remove leading zeroes `data` zero_trail boolean value, `TRUE` remove trailing zeroes `data`","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/TrimSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim Time Series — TrimSeries","text":"function remove remove leading /trailing zeroes ## Returned Function - Arguments    * `data` data frame containing time series data    * `series_variable` column name series variable `data`, default \"deaths\"    * `time_variable` column name time variable `data`, default \"period_end_date\" - Return - fields `data` filtered records trim leading /trailing zeroes","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletDeheaper.html","id":null,"dir":"Reference","previous_headings":"","what":"De-heaping time series — WaveletDeheaper","title":"De-heaping time series — WaveletDeheaper","text":"Fixes heaping errors time series. structure function taken function `find_heap_and_deheap` created Kevin Zhao (https://github.com/davidearn/KevinZhao/blob/main/Report/make_SF_RData.R). needs better documented.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletDeheaper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"De-heaping time series — WaveletDeheaper","text":"","code":"WaveletDeheaper(   time_variable = \"period_end_date\",   series_variable = \"deaths\",   first_date = \"1830-01-01\",   last_date = \"1841-12-31\",   week_start = 45,   week_end = 5 )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletDeheaper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"De-heaping time series — WaveletDeheaper","text":"time_variable column name time variable `data`, default \"period_end_date\" series_variable column name series variable `data`, default \"deaths\" first_date string containing earliest date look heaping errors last_date string containing last date look heaping errors week_start numeric value first week number start looking heaping errors week_end numeric value last week number look heaping errors","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletDeheaper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"De-heaping time series — WaveletDeheaper","text":"function fix heaping errors ## Returned Function - Arguments    * `data` data frame containing time series data - Return - fields `data` additional field called \"deheaped_\" concatenated `series_variable`. heaping errors found, additional field identical field `series_variable","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletInterpolator.html","id":null,"dir":"Reference","previous_headings":"","what":"Wavelet Interpolator — WaveletInterpolator","title":"Wavelet Interpolator — WaveletInterpolator","text":"Linearly interpolates `NA` values series trend variables.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletInterpolator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wavelet Interpolator — WaveletInterpolator","text":"","code":"WaveletInterpolator(   time_variable = \"period_end_date\",   series_variable = \"deaths\",   trend_variable = \"deaths\",   series_suffix = \"_series\",   trend_suffix = \"_trend\" )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletInterpolator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wavelet Interpolator — WaveletInterpolator","text":"time_variable column name time variable `data`, default \"period_end_date\" series_variable column name series variable `data`, default \"deaths_series\" trend_variable column name series variable `data`, default \"deaths_trend\" series_suffix suffix appended series data fields trend_suffix suffix appended trend data fields","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletInterpolator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wavelet Interpolator — WaveletInterpolator","text":"function linearly interpolates series trend data. ## Returned Function - Arguments    * `data` data frame containing time series data - Return - `data` linearly interpolated `series_variable` `trend_variable`","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletJoiner.html","id":null,"dir":"Reference","previous_headings":"","what":"Wavelet Joiner — WaveletJoiner","title":"Wavelet Joiner — WaveletJoiner","text":"Joins series data trend datasets keeps time units one datasets.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletJoiner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wavelet Joiner — WaveletJoiner","text":"","code":"WaveletJoiner(   time_variable = \"period_end_date\",   series_suffix = \"_series\",   trend_suffix = \"_trend\",   keep_series_dates = TRUE )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletJoiner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wavelet Joiner — WaveletJoiner","text":"time_variable column name time variable `data`, default \"period_end_date\" series_suffix suffix appended series data fields trend_suffix suffix appended trend data fields keep_series_dates boolean flag indicate dates `series_data` kept data `trend_data` left joined, `FALSE` dates `trend_data` left joined instead","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletJoiner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wavelet Joiner — WaveletJoiner","text":"function join data trend data sets ## Returned Function - Arguments    * `series_data` data frame containing time series data    * `trend_data` data frame containing trend data - Return - joined data set `time_variable` updated field names","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletNormalizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Wavelet Normalizer — WaveletNormalizer","title":"Wavelet Normalizer — WaveletNormalizer","text":"Creates normalizing fields `data`","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletNormalizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wavelet Normalizer — WaveletNormalizer","text":"","code":"WaveletNormalizer(   time_variable = \"period_end_date\",   series_variable = \"deaths\",   trend_variable = \"deaths\",   series_suffix = \"_series\",   trend_suffix = \"_trend\",   output_emd_trend = \"emd_trend\",   output_norm = \"norm\",   output_sqrt_norm = \"sqrt_norm\",   output_log_norm = \"log_norm\",   output_emd_norm = \"emd_norm\",   output_emd_sqrt = \"emd_sqrt\",   output_emd_log = \"emd_log\",   output_detrend_norm = \"detrend_norm\",   output_detrend_sqrt = \"detrend_sqrt\",   output_detrend_log = \"detrend_log\",   eps = 0.01 )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletNormalizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wavelet Normalizer — WaveletNormalizer","text":"time_variable column name time variable `data`, default \"period_end_date\" series_variable column name series variable `data`, default \"deaths_series\" trend_variable column name series variable `data`, default \"deaths_trend\" series_suffix suffix appended series data fields trend_suffix suffix appended trend data fields output_emd_trend name output field empirical mode decomposition applied `trend_variable` output_norm name output field `series_variable` normalized `output_emd_trend` output_sqrt_norm name output field square root `output_norm` output_log_norm name output field logarithm (`output_norm` + `eps`) output_emd_norm name output field empirical mode decomposition applied `output_norm` output_emd_sqrt name output field empirical mode decomposition applied `output_sqrt_norm` output_emd_log name output field empirical mode decomposition applied `output_log_norm` output_detrend_norm name output field computed field `output_norm`-`output_emd_norm` output_detrend_sqrt name output field computed field `output_sqrt_norm`-`output_emd_sqrt` output_detrend_log name output field computed field `output_log_norm`-`output_emd_log` eps numeric value normalized data perturbed computing logarithm","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletNormalizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wavelet Normalizer — WaveletNormalizer","text":"function creates normalized trend de-trended fields ## Returned Function - Arguments    * `data` data frame containing time series data - Return - `data` additional normalized fields","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletTransformer.html","id":null,"dir":"Reference","previous_headings":"","what":"Wavelet Transformer — WaveletTransformer","title":"Wavelet Transformer — WaveletTransformer","text":"Compute wavelet transform.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletTransformer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wavelet Transformer — WaveletTransformer","text":"","code":"WaveletTransformer(   time_variable = \"period_end_date\",   wavelet_variable = \"detrend_norm\",   ... )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletTransformer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wavelet Transformer — WaveletTransformer","text":"time_variable name time variable field `data` wavelet_variable name field `data` wavelet transformed ... Arguments passed analyze.wavelet.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/WaveletTransformer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wavelet Transformer — WaveletTransformer","text":"function computes wavelet transform ## Returned Function - Arguments    * `data` data frame containing time series data - Return - wavelet transform object EMD::analyze.wavelet applied `wavelet_variable` `data`","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/add_user_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"Add entries to user table — add_user_entries","title":"Add entries to user table — add_user_entries","text":"Adds entries user-defined lookup table Entries names columns user lookup table standards can used entries","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/add_user_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add entries to user table — add_user_entries","text":"","code":"add_user_entries(entries, user_table_path)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/add_user_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add entries to user table — add_user_entries","text":"entries dataframe named list entries add user_table_path string indicating path user lookup table","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/add_user_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add entries to user table — add_user_entries","text":"user lookup table added entries path","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/browse_pipeline_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse Pipeline Dependencies — browse_pipeline_dependencies","title":"Browse Pipeline Dependencies — browse_pipeline_dependencies","text":"Open browser locations dependencies associated set datasets.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/browse_pipeline_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse Pipeline Dependencies — browse_pipeline_dependencies","text":"","code":"browse_pipeline_dependencies(   dataset_ids,   dependency_types = c(\"IsCompiledBy\", \"IsDerivedFrom\", \"References\"),   metadata = iidda.api::ops_staging$metadata(dataset_ids = dataset_ids) )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/browse_pipeline_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse Pipeline Dependencies — browse_pipeline_dependencies","text":"dataset_ids Character vector dataset identifiers. dependency_types Vector types dependencies browse. Possible values include \"IsCompiledBy\", \"IsDerivedFrom\", \"References\". metadata Optional list giving dataset metadata. default uses IIDDA API, requires internet.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/ca_iso_3166_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Order Canadian Provinces Geographically — ca_iso_3166_2","title":"Order Canadian Provinces Geographically — ca_iso_3166_2","text":"Order Canadian Provinces Geographically","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/ca_iso_3166_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order Canadian Provinces Geographically — ca_iso_3166_2","text":"","code":"ca_iso_3166_2(data)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/ca_iso_3166_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order Canadian Provinces Geographically — ca_iso_3166_2","text":"data Dataset containing `iso_3166_2` field Canadian province territory codes.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/check_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if x is a Date, coerce if not — check_date","title":"Test if x is a Date, coerce if not — check_date","text":"Test x Date, coerce ","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/check_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if x is a Date, coerce if not — check_date","text":"","code":"check_date(x)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/check_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if x is a Date, coerce if not — check_date","text":"x vector putative dates","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/check_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if x is a Date, coerce if not — check_date","text":"vector class Date, error","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/check_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if x is a Date, coerce if not — check_date","text":"","code":"d1 <- check_date(\"1920-01-01\") d1 #> [1] \"1920-01-01\" class(d1) #> [1] \"Date\" # returns an error if x can't be coerced to Date easily # check_date(\"may 29th\")"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/clean_canmod_cdi.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean CANMOD CDI Data — clean_canmod_cdi","title":"Clean CANMOD CDI Data — clean_canmod_cdi","text":"important cleaning steps include (1) removing `CA-` ISO-3166-2 codes (within Canada redundant) (2) filtering time-scales 'best'. chance double-counting cases.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/clean_canmod_cdi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean CANMOD CDI Data — clean_canmod_cdi","text":"","code":"clean_canmod_cdi(canmod_cdi, ...)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/clean_canmod_cdi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean CANMOD CDI Data — clean_canmod_cdi","text":"canmod_cdi Dataset IIDDA type `CANMOD CDI`. ... Arguments pass normalize_time_scales.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/create_bin_desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create age bin descriptions — create_bin_desc","title":"Create age bin descriptions — create_bin_desc","text":"Create age bin descriptions joining age_group lookup table","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/create_bin_desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create age bin descriptions — create_bin_desc","text":"","code":"create_bin_desc(age_df)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/create_bin_desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create age bin descriptions — create_bin_desc","text":"age_df data frame data age_group column","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/create_bin_desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create age bin descriptions — create_bin_desc","text":"data frame data bin_desc column","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/data_prep_constructors.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Prep Constructors — data_prep_constructors","title":"Data Prep Constructors — data_prep_constructors","text":"Data Prep Constructors","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/factor_time_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor Time Scale — factor_time_scale","title":"Factor Time Scale — factor_time_scale","text":"Factor Time Scale","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/factor_time_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor Time Scale — factor_time_scale","text":"","code":"factor_time_scale(data)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/factor_time_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor Time Scale — factor_time_scale","text":"data tidy data set `time_scale` column.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/factor_time_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor Time Scale — factor_time_scale","text":"data set factored time_scale column.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/find_unaccounted_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Unaccounted Cases — find_unaccounted_cases","title":"Find Unaccounted Cases — find_unaccounted_cases","text":"Make new records instances sum leaf diseases less reported total basal disease. difference counts gets disease name 'basal_disease'_unaccounted'.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/find_unaccounted_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Unaccounted Cases — find_unaccounted_cases","text":"","code":"find_unaccounted_cases(data)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/find_unaccounted_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Unaccounted Cases — find_unaccounted_cases","text":"data tidy data set `basal_disease` column.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/find_unaccounted_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Unaccounted Cases — find_unaccounted_cases","text":"data set containing records difference reported total basal_disease sum leaf diseases.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_disease_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for a Particular Disease — generate_disease_df","title":"Data for a Particular Disease — generate_disease_df","text":"Data Particular Disease","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_disease_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for a Particular Disease — generate_disease_df","text":"","code":"generate_disease_df(canmod_cdi, disease_name, years = NULL, add_gaps = TRUE)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_disease_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data for a Particular Disease — generate_disease_df","text":"canmod_cdi Dataset IIDDA type `CANMOD CDI`. disease_name Name match `nesting_disease` column `CANMOD CDI` dataset. years `NULL`, vector years keep output data. add_gaps `TRUE`, add records `NA` `cases_this_period` correspond time-periods without data.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_empty_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create empty table with column names — generate_empty_df","title":"Create empty table with column names — generate_empty_df","text":"Creates empty table specified directory using columns names another data frame","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_empty_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create empty table with column names — generate_empty_df","text":"","code":"generate_empty_df(dir_path, lookup_table, csv_name)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_empty_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create empty table with column names — generate_empty_df","text":"dir_path string indicating path directory lookup_table data frame column names include table csv_name string indicating name created .csv file","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_empty_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create empty table with column names — generate_empty_df","text":"empty csv file columns lookup_table directory successfully generated","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_user_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create user-defined lookup table — generate_user_table","title":"Create user-defined lookup table — generate_user_table","text":"Creates empty user-defined lookup table specified directory","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_user_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create user-defined lookup table — generate_user_table","text":"","code":"generate_user_table(path, lookup_table_type)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_user_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create user-defined lookup table — generate_user_table","text":"path string indicating path directory lookup_table_type string indicating type lookup table","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/generate_user_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create user-defined lookup table — generate_user_table","text":"csv file empty lookup table columns lookup_table_type directory successful","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/get_implied_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Implied Zeros — get_implied_zeros","title":"Get Implied Zeros — get_implied_zeros","text":"Add zeros data set implied '0' reported coarser timescale.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/get_implied_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Implied Zeros — get_implied_zeros","text":"","code":"get_implied_zeros(data)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/get_implied_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Implied Zeros — get_implied_zeros","text":"data tidy data set following minimal set columns: `disease`, `nesting_disease`, `year`, `original_dataset_id`, `iso_3166_2`, `basal_disease`, `time_scale`, `period_start_date`, `period_end_date`, `period_mid_date`, `days_this_period`, `dataset_id`","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/get_implied_zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Implied Zeros — get_implied_zeros","text":"tidy data set inferred 0s.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/get_unit_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time unit labels — get_unit_labels","title":"Get time unit labels — get_unit_labels","text":"Get label associated time unit","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/get_unit_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time unit labels — get_unit_labels","text":"","code":"get_unit_labels(unit)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/get_unit_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get time unit labels — get_unit_labels","text":"unit time unit, one iidda.analysis:::time_units","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/get_unit_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time unit labels — get_unit_labels","text":"label associated time unit","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/grid_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a grid of dates starting at the first day in grid unit — grid_dates","title":"Create a grid of dates starting at the first day in grid unit — grid_dates","text":"Wrapper `seq.Date()` `lubridate::floor_date`","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/grid_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a grid of dates starting at the first day in grid unit — grid_dates","text":"","code":"grid_dates(   start_date = \"1920-01-01\",   end_date = \"2020-01-01\",   by = \"1 week\",   unit = \"week\",   lookback = TRUE,   week_start = 7 )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/grid_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a grid of dates starting at the first day in grid unit — grid_dates","text":"start_date starting date end_date end date increment sequence.  Optional.  See ‘Details’. unit string, Period object date-time object. singleton string, specifies time unit multiple unit rounded . Valid base units second, minute, hour, day, week, month, bimonth, quarter, season, halfyear year. Arbitrary unique English abbreviations period() constructor allowed. Rounding multiples units (except weeks) supported. unit Period object, first converted string representation might units constructor. example weeks(1) converted \"7d 0H 0M 0S\". Thus, always check string representation period passing function. unit date-time object rounding done nearest elements unit. range unit vector cover range x ceiling_date() floor_date() round max(x) min(x) elements fall outside range(unit). lookback Logical, first value start `start_date` week_start week start day (Default 7, Sunday. Set lubridate.week.start override). Full abbreviated names days week can English provided current locale.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/grid_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a grid of dates starting at the first day in grid unit — grid_dates","text":"vector Dates first week, month, year","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/grid_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a grid of dates starting at the first day in grid unit — grid_dates","text":"","code":"grid_dates(start_date = \"2023-04-01\" , end_date = \"2023-05-16\") #> [1] \"2023-03-26\" \"2023-04-02\" \"2023-04-09\" \"2023-04-16\" \"2023-04-23\" #> [6] \"2023-04-30\" \"2023-05-07\"  grid_dates(start_date = \"2023-04-01\" , end_date = \"2023-05-16\" , lookback = FALSE) #> [1] \"2023-04-02\" \"2023-04-09\" \"2023-04-16\" \"2023-04-23\" \"2023-04-30\" #> [6] \"2023-05-07\"   grid_dates(start_date = \"2020-04-01\" , end_date = \"2023-05-16\" , by = \"2 months\" , unit = \"month\") #>  [1] \"2020-04-01\" \"2020-06-01\" \"2020-08-01\" \"2020-10-01\" \"2020-12-01\" #>  [6] \"2021-02-01\" \"2021-04-01\" \"2021-06-01\" \"2021-08-01\" \"2021-10-01\" #> [11] \"2021-12-01\" \"2022-02-01\" \"2022-04-01\" \"2022-06-01\" \"2022-08-01\" #> [16] \"2022-10-01\" \"2022-12-01\" \"2023-02-01\" \"2023-04-01\" grid_dates(start_date = \"2020-04-01\" , end_date = \"2023-05-16\" , by = \"2 months\") #> there may be a mismatch between your grid units in `by` and `unit` #>  [1] \"2020-03-29\" \"2020-05-31\" \"2020-07-26\" \"2020-09-27\" \"2020-11-29\" #>  [6] \"2021-01-31\" \"2021-03-28\" \"2021-05-30\" \"2021-08-01\" \"2021-09-26\" #> [11] \"2021-11-28\" \"2022-01-30\" \"2022-03-27\" \"2022-05-29\" \"2022-07-31\" #> [16] \"2022-09-25\" \"2022-11-27\" \"2023-01-29\" \"2023-03-26\""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get IIDDA metadata — iidda_get_metadata","title":"Get IIDDA metadata — iidda_get_metadata","text":"Get starting time period, ending time period mortality cause name data set use axis main plot titles.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get IIDDA metadata — iidda_get_metadata","text":"","code":"iidda_get_metadata(   data,   time_variable = \"period_end_date\",   descriptor_variable = \"cause\" )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get IIDDA metadata — iidda_get_metadata","text":"data data frame containing time series data time_variable column name time variable `data`, default \"period_end_date\" descriptor_variable column name descriptor variable `data`, default \"cause\" mortality data sets.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get IIDDA metadata — iidda_get_metadata","text":"list order containing minimum time period, maximum time period cause name.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Bar Graph — iidda_plot_bar","title":"Plot Bar Graph — iidda_plot_bar","text":"Add bar plot exiting ggplot plot object. Graphical choices made closely reflect plots generated `LBoM::monthly_bar_graph` `LBoM::weekly_bar_graph`.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Bar Graph — iidda_plot_bar","text":"","code":"iidda_plot_bar(   plot_object,   data = NULL,   series_variable = \"deaths\",   time_unit = \"week\" )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Bar Graph — iidda_plot_bar","text":"plot_object `ggplot2` plot object data data frame containing data prepped bar plotting, typically output `iidda_prep_bar()`. `NULL` data inherited `plot_object` series_variable column name series variable `data`, default \"deaths\" time_unit time unit display bar graphs x-axis. Defaults \"week\" one iidda.analysis:::time_units starts \"month\". generalize point able take time_unit argument.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Bar Graph — iidda_plot_bar","text":"ggplot2 plot object containing bar graphs time series data","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Box Plot — iidda_plot_box","title":"Plot Box Plot — iidda_plot_box","text":"Add box plot exiting ggplot plot object.  Graphical choices made closely reflect plots generated `LBoM::monthly_box_plot`.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Box Plot — iidda_plot_box","text":"","code":"iidda_plot_box(   plot_object,   data = NULL,   series_variable = \"deaths\",   time_unit = \"week\",   ... )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Box Plot — iidda_plot_box","text":"plot_object `ggplot2` plot object data data frame containing data prepped box plotting, typically output `iidda_prep_box()`. `NULL` data inherited `plot_object` series_variable column name series variable `data`, default \"deaths\" time_unit time unit display box plots x-axis. Defaults \"week\", able handle time_unit iidda.analysis:::time_units. ... arguments passed `scale_x_discrete`","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Box Plot — iidda_plot_box","text":"ggplot2 plot object containing box plots time series data","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Heatmap — iidda_plot_heatmap","title":"Plot Heatmap — iidda_plot_heatmap","text":"Add yearly vs. weekly heatmap exiting ggplot plot object. Graphical choices made closely reflect plots generated `LBoM::seasonal_heat_map`.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Heatmap — iidda_plot_heatmap","text":"","code":"iidda_plot_heatmap(   plot_object,   data = NULL,   series_variable = \"deaths\",   start_year_variable = \"Year\",   end_year_variable = \"End Year\",   start_day_variable = \"Day of Year\",   end_day_variable = \"End Day of Year\",   colour_trans = \"log2\",   NA_colour = \"black\",   palette_colour = \"RdGy\",   ... )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Heatmap — iidda_plot_heatmap","text":"plot_object `ggplot2` plot object data data frame containing data prepped yearly vs. weekly heatmaps, typically output `iidda_prep_heatmap()`. `NULL` data inherited `plot_object`. series_variable column name series variable `data`, default \"deaths\" start_year_variable column name time variable containing year starting period, defaults \"Year\" end_year_variable column name time variable containing year ending period, defaults \"End Year\" start_day_variable column name time variable containing day starting period, defaults \"Day Year\" end_day_variable column name time variable containing day ending period, defaults \"End Day Year\" colour_trans string indicating colour transformation, one \"log2\", \"sqrt\" \"linear\" NA_colour colour `NA` values, defaults \"black\" palette_colour colour heatmap palette, defaults \"RdGy\". specify type palette colours accepted argument. ... currently used.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Heatmap — iidda_plot_heatmap","text":"ggplot2 plot object containing yearly vs. weekly heatmap time series data","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Plot Highlight — iidda_plot_highlight","title":"Add Plot Highlight — iidda_plot_highlight","text":"Add rectangular highlighted region existing ggplot2 plot object","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Plot Highlight — iidda_plot_highlight","text":"","code":"iidda_plot_highlight(   plot_object,   data = NULL,   series_variable = \"deaths\",   time_variable = \"period_end_date\",   filter_variable = \"period_end_date\",   filter_start = \"1700-01-01\",   filter_end = \"1800-01-01\",   ... )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Plot Highlight — iidda_plot_highlight","text":"plot_object `ggplot2` plot object data data frame containing time series data. `NULL` data inherited `plot_object`. tested data output `iidda_plot_ma`. series_variable column name series variable `data`, default \"deaths\" time_variable column name time variable `data`, default \"period_end_date\" filter_variable column name variable filter `data`, default \"period_end_date\" filter_start value `filter_variable` starting range, default \"1700-01-01\" filter_end value `filter_variable` ending range, default \"1800-01-01\" ... arguments passed `ggforce::geom_mark_rect`, example annotating text","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_highlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Plot Highlight — iidda_plot_highlight","text":"ggplot2 plot object rectangular plot highlight","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_ma.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Moving Average Time Series — iidda_plot_ma","title":"Plot Moving Average Time Series — iidda_plot_ma","text":"Add moving average time series line exiting ggplot plot object. Graphical choices made closely reflect plots generated `LBoM::plot.LBoM`.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_ma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Moving Average Time Series — iidda_plot_ma","text":"","code":"iidda_plot_ma(   plot_object,   data = NULL,   series_variable = \"deaths\",   time_variable = \"period_end_date\" )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_ma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Moving Average Time Series — iidda_plot_ma","text":"plot_object `ggplot2` plot object data data frame containing moving average time series data, typically output `iidda_prep_ma()`. `NULL` data inherited `plot_object` series_variable column name series variable `data`, default \"deaths\" time_variable column name time variable `data`, default \"period_end_date\"","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_ma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Moving Average Time Series — iidda_plot_ma","text":"ggplot2 plot object containing moving average time series","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_rohani_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Rohani Heatmap — iidda_plot_rohani_heatmap","title":"Plot Rohani Heatmap — iidda_plot_rohani_heatmap","text":"Add rohani heatmap exiting ggplot plot object. Possibly extended include time series separate facet.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_rohani_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Rohani Heatmap — iidda_plot_rohani_heatmap","text":"","code":"iidda_plot_rohani_heatmap(   plot_object,   data = NULL,   series_variable = \"deaths\",   start_year_variable = \"Year\",   end_year_variable = \"End Year\",   start_day_variable = \"Day of Year\",   end_day_variable = \"End Day of Year\",   grouping_variable = \"cause\",   colour_trans = log1p_modified_trans(),   n_colours = (scales::brewer_pal(palette = \"YlOrRd\"))(9),   NA_colour = \"black\",   palette_colour = \"YlOrRd\" )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_rohani_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Rohani Heatmap — iidda_plot_rohani_heatmap","text":"plot_object `ggplot2` plot object data data frame containing data prepped yearly vs. weekly heatmaps, typically output `iidda_prep_heatmap()`. `NULL` data inherited `plot_object`. series_variable column name series variable `data`, default \"deaths\" start_year_variable column name time variable containing year starting period, defaults \"Year\" end_year_variable column name time variable containing year ending period, defaults \"End Year\" start_day_variable column name time variable containing day starting period, defaults \"Day Year\" end_day_variable column name time variable containing day ending period, defaults \"End Day Year\" grouping_variable column name grouping variable appear y-axis heatmap. colour_trans function scale colours, supplied trans argument scale_fill_gradientn() n_colours vector colours supplied scale_fill_gradientn() NA_colour colour `NA` values, defaults \"black\" palette_colour colour heatmap palette, defaults \"RdGy\". specify type palette colours accepted argument.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_rohani_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Rohani Heatmap — iidda_plot_rohani_heatmap","text":"ggplot2 plot object containing yearly vs. weekly heatmap time series data","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_scales.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale series data — iidda_plot_scales","title":"Scale series data — iidda_plot_scales","text":"Scale time series data transformation.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_scales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale series data — iidda_plot_scales","text":"","code":"iidda_plot_scales(plot_object, data = NULL, scale_transform = \"log1p\")"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_scales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale series data — iidda_plot_scales","text":"plot_object `ggplot2` plot object data data frame containing time series data. `NULL` data inherited `plot_object`. scale_transform transformation apply y variable, must valid ggplot2 transformation.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_scales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale series data — iidda_plot_scales","text":"ggplot2 plot object scaled y data","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Time Series — iidda_plot_series","title":"Plot Time Series — iidda_plot_series","text":"Add time series line exiting ggplot plot object.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Time Series — iidda_plot_series","text":"","code":"iidda_plot_series(   plot_object,   data = NULL,   series_variable = \"deaths\",   time_variable = \"period_end_date\",   time_unit = \"year\" )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Time Series — iidda_plot_series","text":"plot_object `ggplot2` plot object data data frame containing time series data, typically output `iidda_prep_series()`. `NULL` data inherited `plot_object` series_variable column name series variable `data`, default \"deaths\" time_variable column name time variable `data`, default \"period_end_date\" time_unit time unit display x-axis.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Time Series — iidda_plot_series","text":"ggplot2 plot object containing moving average time series","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"LBoM plot settings — iidda_plot_settings","title":"LBoM plot settings — iidda_plot_settings","text":"Add basic features ggplot2 plot object including title, subtitle classic `ggplot2::theme_bw` theme.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LBoM plot settings — iidda_plot_settings","text":"","code":"iidda_plot_settings(   plot_object,   data,   min_time = \"min_time\",   max_time = \"max_time\",   descriptor_name = \"descriptor_name\",   theme = iidda_theme )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LBoM plot settings — iidda_plot_settings","text":"plot_object `ggplot2` plot object data list containing metadata. `NULL` data inherited `plot_object`. min_time name field data containing minimum time period range, defaults \"min_time\". max_time name field data containing minimum time period range, defaults \"max_time\". descriptor_name either name field data containing descriptor string used plot title. 3 elements descriptor field, `descriptor_variable` used plot title. theme ggplot theme","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LBoM plot settings — iidda_plot_settings","text":"ggplot2 plot object title, subtitle adjusted theme.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_wavelet.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Wavelet — iidda_plot_wavelet","title":"Plot Wavelet — iidda_plot_wavelet","text":"Plot wavelet look similar base R plot WaveletComp::wt.image using ggplot2 functionality. visual choices made reflect work done Steven Lee (https://github.com/davidearn/StevenLee) Kevin Zhao (https://github.com/davidearn/KevinZhao).","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_wavelet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Wavelet — iidda_plot_wavelet","text":"","code":"iidda_plot_wavelet(   plot_object,   data = NULL,   wavelet_data,   contour_data,   y_variable_name = \"Period (years)\",   fill_variable_name = \"Power\",   max_period = 10,   colour_levels = 250,   start_hue = 0,   end_hue = 0.7,   sig_lvl = 0.05 )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_wavelet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Wavelet — iidda_plot_wavelet","text":"plot_object `ggplot2` plot object data data frame containing wavelet data prepped use ggplot2::geom_tile. output iidda_prep_wavelet produces data set prepped argument, named tile_data_to_plot returned list. `NULL` data inherited `plot_object`. wavelet_data list containing raw wavelet transformed data, typically output WaveletComp::analyze.wavelet. output iidda_prep_wavelet produces data set prepped argument, named transformed_data returned list. contour_data data set containing contour data prepped use ggplot2::geom_contour. output iidda_prep_wavelet produces data set prepped argument, named cont_data_to_plot returned list. y_variable_name name y variable plot, defaults \"Period (years)\". fill_variable_name name colour fill variable plot, defaults \"Power\". max_period maximum period appear plot, defaults 10 years. colour_levels number colours pass scale_fill_gradientn. start_hue starting hue colour pass scale_fill_gradientn, default taken WaveletComp::wt.image. end_hue ending hue colour pass scale_fill_gradientn, default taken WaveletComp::wt.image. sig_lvl significance level white contours","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_plot_wavelet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Wavelet — iidda_plot_wavelet","text":"ggplot2 object wavelet","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep Data for Bar Graph — iidda_prep_bar","title":"Prep Data for Bar Graph — iidda_prep_bar","text":"Prep data plotting bar graphs. Prep steps taken `LBoM::monthly_bar_graph` `LBoM::weekly_bar_graph` include handling missing values aggregating series data time unit grouping variable.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep Data for Bar Graph — iidda_prep_bar","text":"","code":"iidda_prep_bar(   data,   series_variable = \"deaths\",   time_variable = \"period_end_date\",   time_unit = \"week\",   handle_missing_values = HandleMissingValues(na_remove = FALSE, na_replace = NULL),   handle_zero_values = HandleZeroValues(zero_remove = FALSE, zero_replace = NULL) )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep Data for Bar Graph — iidda_prep_bar","text":"data data frame containing time series data series_variable column name series variable `data`, default \"deaths\" time_variable column name time variable `data`, default \"period_end_date\" time_unit time unit sum series data , must one iidda.analysis:::time_units, defaults \"week\". handle_missing_values function handle missing values, defaults HandleMissingValues handle_zero_values function handle zero values, defaults HandleZeroValues","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep Data for Bar Graph — iidda_prep_bar","text":"`data` records prepped plotting bar graphs `series_variable` `time_unit` field. name resulting `time_unit` field named lubridate_funcs.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep Data for Box plot — iidda_prep_box","title":"Prep Data for Box plot — iidda_prep_box","text":"Prep data plotting box plots. Prep steps taken `LBoM::monthly_box_plot` include handling missing values creating additional time unit fields.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep Data for Box plot — iidda_prep_box","text":"","code":"iidda_prep_box(   data,   series_variable = \"deaths\",   time_variable = \"period_end_date\",   time_unit = \"week\",   handle_missing_values = HandleMissingValues(na_remove = FALSE, na_replace = NULL),   handle_zero_values = HandleZeroValues(zero_remove = FALSE, zero_replace = NULL) )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep Data for Box plot — iidda_prep_box","text":"data data frame containing time series data series_variable column name series variable `data`, default \"deaths\" time_variable column name time variable `data`, default \"period_end_date\" time_unit time unit create field `time_variable`. Must one iidda.analysis:::time_units, defaults \"week\". handle_missing_values function handle missing values, defaults HandleMissingValues handle_zero_values function handle zero values, defaults HandleZeroValues","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep Data for Box plot — iidda_prep_box","text":"fields `data` records prepped plotting box plots. name new `time_unit` field named lubridate_funcs.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_ma.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep Data for Moving Average Plot — iidda_prep_ma","title":"Prep Data for Moving Average Plot — iidda_prep_ma","text":"Prep data plotting moving average. Prep steps taken `LBoM::plot.LBoM` include handling missing values zeroes, optionally trimming time series computing moving average.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_ma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep Data for Moving Average Plot — iidda_prep_ma","text":"","code":"iidda_prep_ma(   data,   series_variable = \"deaths\",   time_variable = \"period_end_date\",   trim_zeroes = TRUE,   trim_series = TrimSeries(zero_lead = FALSE, zero_trail = FALSE),   handle_missing_values = HandleMissingValues(na_remove = FALSE, na_replace = NULL),   handle_zero_values = HandleZeroValues(zero_remove = FALSE, zero_replace = NULL),   compute_moving_average = ComputeMovingAverage(ma_window_length = 52) )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_ma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep Data for Moving Average Plot — iidda_prep_ma","text":"data data frame containing time series data series_variable column name series variable `data`, default \"deaths\" time_variable column name time variable `data`, default \"period_end_date\" trim_zeroes boolean value filter data exclude leading trailing zeroes trim_series function trim leading trailing series zeroes, defaults TrimSeries handle_missing_values function handle missing values, defaults HandleMissingValues handle_zero_values function handle zero values, defaults HandleZeroValues compute_moving_average function compute moving average `series_variable`","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_ma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep Data for Moving Average Plot — iidda_prep_ma","text":"fields `data` records prepped plotting moving average time series","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_rohani.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep Data for Rohani Plot — iidda_prep_rohani","title":"Prep Data for Rohani Plot — iidda_prep_rohani","text":"Prep data rohani plots. Prep steps include creating additional time unit fields, summarizing series variable time unit grouping variable (x y axis variables) ,optionally normalizing series data range (0,1). default, grouping variable ranked order summarized series variable. Needs generalized , might need handle case desired y-axis second time unit, seasonal heatmap plot therefore making use year_end_fix function.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_rohani.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep Data for Rohani Plot — iidda_prep_rohani","text":"","code":"iidda_prep_rohani(   data,   series_variable = \"deaths\",   time_variable = \"period_end_date\",   start_time_variable = \"period_end_date\",   time_unit = c(\"year\"),   grouping_variable = \"cause\",   ranking_variable = NULL,   normalize = FALSE,   handle_missing_values = HandleMissingValues(na_remove = FALSE, na_replace = NULL),   handle_zero_values = HandleZeroValues(zero_remove = FALSE, zero_replace = NULL),   create_nonexistent = FALSE )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_rohani.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep Data for Rohani Plot — iidda_prep_rohani","text":"data data frame containing time series data series_variable column name series variable `data`, default \"deaths\" time_variable column name time variable `data`, default \"period_end_date\" start_time_variable column name time variable `data`, default \"period_end_date\" time_unit vector new time unit fields create `start_time_variable` `end_time_variable`. Defaults \"c(\"year\")\". currently functionality expects \"year\" included, made general incorporate iidda.analysis:::time_units. grouping_variable column name grouping variable appear y-axis heatmap. ranking_variable column name variable used rank grouping variable. normalize boolean flag normalize `series_variable` data 0 1. handle_missing_values function handle missing values, defaults HandleMissingValues handle_zero_values function handle zero values, defaults HandleZeroValues create_nonexistent boolean flag create NA records non-existent `time_unit` `grouping_variable`. creates combinations `time_unit` `grouping_variable` ensure missing records.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_rohani.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep Data for Rohani Plot — iidda_prep_rohani","text":"fields `data` records prepped plotting rohani heatmaps. name new `time_unit` fields named lubridate_funcs.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_seasonal_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep Data for seasonal heatmap — iidda_prep_seasonal_heatmap","title":"Prep Data for seasonal heatmap — iidda_prep_seasonal_heatmap","text":"Prep data seasonal heatmap plots. Prep steps taken `LBoM::seasonal_heat_map` include creating additional time unit fields, splitting weeks cover year end,  optionally normalizing series data range (0,1).","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_seasonal_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep Data for seasonal heatmap — iidda_prep_seasonal_heatmap","text":"","code":"iidda_prep_seasonal_heatmap(   data,   series_variable = \"deaths\",   start_time_variable = \"period_start_date\",   end_time_variable = \"period_end_date\",   time_unit = c(\"yday\", \"year\"),   prepend_string = \"End \",   normalize = FALSE,   ... )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_seasonal_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep Data for seasonal heatmap — iidda_prep_seasonal_heatmap","text":"data data frame containing time series data series_variable column name series variable `data`, default \"deaths\" start_time_variable column name time variable `data`, default \"period_start_date\" end_time_variable column name time variable `data`, default \"period_end_date\" time_unit vector new time unit fields create `start_time_variable` `end_time_variable`. Defaults \"c(\"yday\",\"year\")\". currently functionality expects \"yday\" \"year\" included, made general incorporate iidda.analysis:::time_units. prepend_string string prepend newly created time_unit fields distinguish time_unit fields corresponding starting versus ending time periods. Defaults \"End \". example, `time_unit` \"year\" create field name \"Year\" `start_time_variable` field called \"End Year\" created `end_time_variable`. normalize boolean flag normalize `series_variable` data 0 1. ... optional arguments `year_end_fix()`","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_seasonal_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep Data for seasonal heatmap — iidda_prep_seasonal_heatmap","text":"fields `data` records prepped plotting seasonal heatmaps. name new `time_unit` fields named lubridate_funcs.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep Data for Time Series — iidda_prep_series","title":"Prep Data for Time Series — iidda_prep_series","text":"Prep data basic time series plot. Prep steps taken `LBoM::plot.LBoM` include handling missing values zeroes, optionally trimming time series.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep Data for Time Series — iidda_prep_series","text":"","code":"iidda_prep_series(   data,   series_variable = \"deaths\",   time_variable = \"period_end_date\",   grouping_variable = \"cause\",   time_unit = \"year\",   summarize_series = TRUE,   trim_zeroes = TRUE,   trim_series = TrimSeries(zero_lead = FALSE, zero_trail = FALSE),   handle_missing_values = HandleMissingValues(na_remove = FALSE, na_replace = NULL),   handle_zero_values = HandleZeroValues(zero_remove = FALSE, zero_replace = NULL) )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep Data for Time Series — iidda_prep_series","text":"data data frame containing time series data series_variable column name series variable `data`, default \"deaths\" time_variable column name time variable `data`, default \"period_end_date\" grouping_variable column name grouping variable `data` summarize series variable , `summarize=TRUE` time_unit time unit sum series data , must one iidda.analysis:::time_units, defaults \"year\". summarize_series boolean value indicate summarizing `time_unit` series variable trim_zeroes boolean value filter data exclude leading trailing zeroes trim_series function trim leading trailing series zeroes, defaults TrimSeries handle_missing_values function handle missing values, defaults HandleMissingValues handle_zero_values function handle zero values, defaults HandleZeroValues","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep Data for Time Series — iidda_prep_series","text":"fields `data` records prepped plotting moving average time series","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_wavelet.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep Data for Wavelet Plot — iidda_prep_wavelet","title":"Prep Data for Wavelet Plot — iidda_prep_wavelet","text":"Prep data wavelet plot. Prep steps taken code provided Steven Lee (https://github.com/davidearn/StevenLee) Kevin Zhao (https://github.com/davidearn/KevinZhao).","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_wavelet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep Data for Wavelet Plot — iidda_prep_wavelet","text":"","code":"iidda_prep_wavelet(   data,   trend_data,   time_variable = \"period_end_date\",   series_variable = \"deaths\",   trend_variable = \"deaths\",   series_suffix = \"_series\",   trend_suffix = \"_trend\",   wavelet_variable = \"detrend_norm\",   output_emd_trend = \"emd_trend\",   output_norm = \"norm\",   output_sqrt_norm = \"sqrt_norm\",   output_log_norm = \"log_norm\",   output_emd_norm = \"emd_norm\",   output_emd_sqrt = \"emd_sqrt\",   output_emd_log = \"emd_log\",   output_detrend_norm = \"detrend_norm\",   output_detrend_sqrt = \"detrend_sqrt\",   output_detrend_log = \"detrend_log\",   data_harmonizer = SeriesHarmonizer(time_variable, series_variable),   trend_data_harmonizer = SeriesHarmonizer(time_variable, trend_variable),   data_deheaper = WaveletDeheaper(time_variable, series_variable),   trend_deheaper = WaveletDeheaper(time_variable, trend_variable),   joiner = WaveletJoiner(time_variable, series_suffix, trend_suffix),   interpolator = WaveletInterpolator(time_variable, series_variable, trend_variable,     series_suffix, trend_suffix),   normalizer = WaveletNormalizer(time_variable, series_variable, trend_variable,     series_suffix, trend_suffix, output_emd_trend, output_norm, output_sqrt_norm,     output_log_norm, output_emd_norm, output_emd_sqrt, output_emd_log,     output_detrend_norm, output_detrend_sqrt, output_detrend_log),   transformer = WaveletTransformer(time_variable, wavelet_variable, dt = 1/52, dj = 1/50,     lowerPeriod = 1/2, upperPeriod = 10, n.sim = 1000, make.pval = TRUE, date.format =     \"%Y-%m-%d\") )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_wavelet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep Data for Wavelet Plot — iidda_prep_wavelet","text":"data data frame containing time series data trend_data data frame containing time series trend data time_variable column name time variable `data`, default \"period_end_date\" series_variable column name series variable `data`, default \"deaths_series\" trend_variable column name series variable `data`, default \"deaths_trend\" series_suffix suffix appended series data fields trend_suffix suffix appended trend data fields wavelet_variable name field `data` wavelet transformed output_emd_trend name output field empirical mode decomposition applied `trend_variable` output_norm name output field `series_variable` normalized `output_emd_trend` output_sqrt_norm name output field square root `output_norm` output_log_norm name output field logarithm (`output_norm` + `eps`) output_emd_norm name output field empirical mode decomposition applied `output_norm` output_emd_sqrt name output field empirical mode decomposition applied `output_sqrt_norm` output_emd_log name output field empirical mode decomposition applied `output_log_norm` output_detrend_norm name output field computed field `output_norm`-`output_emd_norm` output_detrend_sqrt name output field computed field `output_sqrt_norm`-`output_emd_sqrt` output_detrend_log name output field computed field `output_log_norm`-`output_emd_log` data_harmonizer function harmonizes time scales series names one data point per time unit trend_data_harmonizer function harmonizes time scales trend names one data point per time unit data_deheaper function fixes heaping errors series data trend_deheaper function fixes heaping errors trend data joiner function joins series trend data sets interpolator function linearly interpolates series trend data normalizer function computes normalized fields transformer function computes wavelet transform","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_prep_wavelet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep Data for Wavelet Plot — iidda_prep_wavelet","text":"list containing:        * transforemd_data - wavelet transformed data        * tile_data_to_plot - data set wavelet transformed data prepped plotting ggplot2::geom_tile        * contour_data_to_plot - data set transformed wavelet data prepped plotting ggplot2::geom_contour","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Themes for ggplot2 — iidda_theme","title":"Themes for ggplot2 — iidda_theme","text":"Themes ggplot2","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Themes for ggplot2 — iidda_theme","text":"","code":"iidda_theme()  iidda_theme_time()  iidda_theme_heat()  iidda_theme_above()"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/iidda_theme.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Themes for ggplot2 — iidda_theme","text":"iidda_theme_time(): Theme plots x-axis represents time. x-axis titles plotted theme, meaning time axis obvious. iidda_theme_heat(): Theme heatmaps x-axis represents time. x-axis titles plotted theme, meaning time axis obvious. Grid lines plotted theme interpretation can compromised grid lines visible colours heatmap. iidda_theme_above(): Theme plots x-axis represents time, time information displayed vertically aligned plots time axis.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/join_lookup_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Join lookup table — join_lookup_table","title":"Join lookup table — join_lookup_table","text":"Joins lookup table API data","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/join_lookup_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join lookup table — join_lookup_table","text":"","code":"join_lookup_table(raw_data, lookup_type, api_hook)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/join_lookup_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join lookup table — join_lookup_table","text":"raw_data data frame table harmonized lookup_type string indicating type lookup table API join api_hook API operations list","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/join_lookup_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join lookup table — join_lookup_table","text":"data frame harmonized data keys API","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/join_user_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Join user-defined lookup table — join_user_table","title":"Join user-defined lookup table — join_user_table","text":"Joins user-defined lookup table data","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/join_user_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join user-defined lookup table — join_user_table","text":"","code":"join_user_table(raw_data, user_table_path, lookup_type, join_by)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/join_user_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join user-defined lookup table — join_user_table","text":"raw_data data frame table harmonized user_table_path string indicating path user-defined lookup table lookup_type string indicating type lookup table (disease, location, sex). Used determine columns join join_by specified join_by vector strings indicating columns join (optional lookup_type disease, location, sex)","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/join_user_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join user-defined lookup table — join_user_table","text":"data frame harmonized data user-defined keys","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/log1p_modified_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Log1p Scale Transformation — log1p_modified_trans","title":"Log1p Scale Transformation — log1p_modified_trans","text":"Slight modification `log1p_trans()` include better breaks log1p-based (log-based shifted 1 breaks can computed presence zeroes.)","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/log1p_modified_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log1p Scale Transformation — log1p_modified_trans","text":"","code":"log1p_modified_trans(n = 10)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/log1p_modified_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log1p Scale Transformation — log1p_modified_trans","text":"n number desired breaks","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/log1p_modified_trans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log1p Scale Transformation — log1p_modified_trans","text":"scales::trans_new function","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/lookup_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Left join for lookup tables — lookup_join","title":"Left join for lookup tables — lookup_join","text":"Left joins lookup table data frame data.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/lookup_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left join for lookup tables — lookup_join","text":"","code":"lookup_join(raw_data, lookup_table, join_by, verbose = FALSE)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/lookup_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Left join for lookup tables — lookup_join","text":"raw_data Data frame data harmonized. lookup_table Data frame lookup table. join_by Vector strings indicating columns left_join (can use names_to_join_by specify manually). verbose Print information lookup.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/lookup_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Left join for lookup tables — lookup_join","text":"Data frame newly harmonized resolved data. Note entries returned data frame strings.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/lubridate_funcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Lubridate functions — lubridate_funcs","title":"Lubridate functions — lubridate_funcs","text":"lubridate functions desired interpretable labels","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/lubridate_funcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lubridate functions — lubridate_funcs","text":"","code":"lubridate_funcs"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/lubridate_funcs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lubridate functions — lubridate_funcs","text":"object class character length 10.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/make_time_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time transformation — make_time_trans","title":"Get time transformation — make_time_trans","text":"Get associated lubridate function compute time unit.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/make_time_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time transformation — make_time_trans","text":"","code":"make_time_trans(unit = unname(time_units))"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/make_time_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get time transformation — make_time_trans","text":"unit time unit, one iidda.analysis:::time_units","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/make_time_trans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time transformation — make_time_trans","text":"function compute time unit","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/mid_dates_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Period Mid-Dates and Mid-Times — mid_dates_times","title":"Period Mid-Dates and Mid-Times — mid_dates_times","text":"Compute vector giving mid-points vector temporal periods, defined start dates one either vector end dates vector period lengths days (see num_days). can either return date, mid_dates, date-time, mid_times. addition type return value (date vs time), former rounds nearest date whereas latter accurate nearest hour can account uneven","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/mid_dates_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Period Mid-Dates and Mid-Times — mid_dates_times","text":"","code":"mid_dates(start_date, end_date, period_length)  mid_times(start_date, end_date, period_length)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/mid_dates_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Period Mid-Dates and Mid-Times — mid_dates_times","text":"start_date Vector period starting dates end_date Vector period ending dates. missing period_length used define ends periods. period_length Vector integers giving period length days. missing calculated using num_days.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/mutate_time_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate time variables — mutate_time_vars","title":"Mutate time variables — mutate_time_vars","text":"Create new time unit fields","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/mutate_time_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate time variables — mutate_time_vars","text":"","code":"mutate_time_vars(   data,   unit = unname(time_units),   input_nm = \"period_end_date\",   output_nm = get_unit_labels(unit) )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/mutate_time_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate time variables — mutate_time_vars","text":"data data set containing input time field unit time unit, one iidda.analysis:::time_units input_nm field name `data` containing input time field output_nm field name newly created time unit field, default uses get_unit_labels().","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/mutate_time_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate time variables — mutate_time_vars","text":"fields `data` additional time unit field","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/names_to_join_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Column names to join by — names_to_join_by","title":"Column names to join by — names_to_join_by","text":"Defines column names join type lookup table","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/names_to_join_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column names to join by — names_to_join_by","text":"","code":"names_to_join_by(lookup_type)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/names_to_join_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column names to join by — names_to_join_by","text":"lookup_type string indicating type lookup table (disease, location, sex, age group)","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/names_to_join_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column names to join by — names_to_join_by","text":"vector column names join type lookup table","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_disease_hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Disease Hierarchy — normalize_disease_hierarchy","title":"Normalize Disease Hierarchy — normalize_disease_hierarchy","text":"Take tidy data set potentially complex disease hierarchy flatten hierarchy , particular time location (context), diseases `disease` column `nesting_disease`.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_disease_hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Disease Hierarchy — normalize_disease_hierarchy","text":"","code":"normalize_disease_hierarchy(   data,   disease_lookup,   grouping_columns = c(\"period_start_date\", \"period_end_date\", \"location\"),   basal_diseases_to_prune = character(),   find_unaccounted_cases = TRUE,   specials_pattern = \"_unaccounted$\" )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_disease_hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Disease Hierarchy — normalize_disease_hierarchy","text":"data tidy data set following minimal set columns: `disease`, `nesting_disease`, `basal_disease`, `period_start_date`, `period_end_date`, `location`. Note latter three can modified `grouping_columns`. disease_lookup lookup table `disease` `nesting_disease` columns describe global disease hierarchy applied locally flatten disease hierarchy point time space tidy data set `data` argument. grouping_columns Character vector column names use grouping determine context. basal_diseases_to_prune Character vector `disease`s remove `data`. find_unaccounted_cases Make new records instances sum leaf diseases less reported total basal disease. specials_pattern Optional regular expression use match `disease` names `data` added lookup table. useful disease names historical produced harmonization purposes. common example `\"_unaccounted$\"`, default. Setting argument `NULL` avoids adding special disease names lookup table.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_duplicate_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Duplicate Sources — normalize_duplicate_sources","title":"Normalize Duplicate Sources — normalize_duplicate_sources","text":"Filter overlapping sources `disease/nesting_disease/basal_disease`, `period_start_date`, `period_end_date` , `iso_3166_2`, choice keep either national level data (.e. Statistics Canada / Dominion Bureau Statistics / Health Canada) provincial level data (provincial ministry Health).","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_duplicate_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Duplicate Sources — normalize_duplicate_sources","text":"","code":"normalize_duplicate_sources(data, preferred_jurisdiction = \"national\")"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_duplicate_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Duplicate Sources — normalize_duplicate_sources","text":"data tidy data set columns `dataset_id` , `period_start_date`, `period_end_date` , `disease` , `nesting_disease` , `basal_disease`, `time_scale`. preferred_jurisdiction 'national' 'provincial', indicating jurisdiction level kept sources overlap.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_duplicate_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Duplicate Sources — normalize_duplicate_sources","text":"data set overlapping sources.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Location — normalize_location","title":"Normalize Location — normalize_location","text":"Set geographic order provinces territories remove country-level data.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Location — normalize_location","text":"","code":"normalize_location(data)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Location — normalize_location","text":"data Tidy dataset iso_3166_2 column.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Location — normalize_location","text":"Tidy dataset without country-level data provinces territories geographically ordered.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Population — normalize_population","title":"Normalize Population — normalize_population","text":"Normalize Population","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Population — normalize_population","text":"","code":"normalize_population(data, harmonized_population)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Population — normalize_population","text":"data Tidy dataset columns period_start_date, period_end_date iso_3166_2. harmonized_population Harmonized population data columns date, iso_3166_2, population (columns dropped).","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Population — normalize_population","text":"Tidy dataset joined harmonized population.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_time_scales.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Time Scales — normalize_time_scales","title":"Normalize Time Scales — normalize_time_scales","text":"Choose single best `time_scale` year dataset, grouped nesting disease. best `time_scale` defined longest shortest time scales location sub-disease.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_time_scales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Time Scales — normalize_time_scales","text":"","code":"normalize_time_scales(   data,   initial_group = c(\"year\", \"iso_3166\", \"iso_3166_2\", \"disease\", \"nesting_disease\",     \"basal_disease\"),   final_group = c(\"basal_disease\"),   get_implied_zeros = TRUE,   aggregate_if_unavailable = TRUE )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_time_scales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Time Scales — normalize_time_scales","text":"data tidy data set columns `time_scale`, `period_start_date` `period_end_date`. initial_group Character vector naming columns defining initial grouping used compute shortest time scales. final_group Character vector naming columns defining final grouping used compute longest shortest time scales. get_implied_zeros Add zeros implied '0' reported coarser timescale. aggregate_if_unavailable location reporting determined 'best timescale', reporting finer timescale, aggregate finer timescale 'best timescale'.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/normalize_time_scales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Time Scales — normalize_time_scales","text":"data set containing records optimal time scale.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/num_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Numbers of Days — num_days","title":"Numbers of Days — num_days","text":"Compute vector giving number days set periods, given equal length vectors start date end date periods. ","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/num_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbers of Days — num_days","text":"","code":"num_days(start_date, end_date)  num_days_util(start_date, end_date)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/num_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbers of Days — num_days","text":"start_date Vector period starting dates end_date Vector period ending dates","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/num_days.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Numbers of Days — num_days","text":"num_days_util(): Low-level interface `num_days`.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/period_averager.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain period midpoints and average daily rates for count data — period_averager","title":"Obtain period midpoints and average daily rates for count data — period_averager","text":"Obtain period midpoints average daily rates count data","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/period_averager.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain period midpoints and average daily rates for count data — period_averager","text":"","code":"period_averager(   data,   count_col = \"cases_this_period\",   start_col = \"period_start_date\",   end_col = \"period_end_date\",   norm_col = NULL,   norm_const = 1e+05,   keep_raw = TRUE,   keep_cols = names(data) )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/period_averager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain period midpoints and average daily rates for count data — period_averager","text":"data Data frame rows minimum containing period start end dates count variable. count_col Character, name count data column. start_col Character, name start date column. end_col Character, name end date column. norm_col Character, name column giving data normalization. good option often population_reporting, column many datasets containing total size reference population count data. avoid normalization set norm_col NULL, default. norm_const Numeric value multiplying daily_rate column norm_col supplied. default 1e5, corresponds daily_rate units count per day per 100,000 individuals norm_col represents reference population size. keep_raw Logical value indicating whether force *_col columns output, even specified keep_cols, place beginning columns list. default TRUE. keep_cols Character vector containing names columns input data retain output. columns retained default.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/period_averager.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain period midpoints and average daily rates for count data — period_averager","text":"Data frame containing following fields. Columns original dataset specified using keep_raw keep_cols. year : Year period_start_date. num_days : Length period days beginning period_start_date end period_end_date. period_mid_time : Timestamp middle period. period_mid_date : Date containing period_mid_time. daily_rate : Daily count rate, default given daily_rate = count_col / num_days. name norm_col specified daily_rate = norm_const * count_col / num_days / norm_col. interpreting formulas, please keep mind norm_const numeric constant, num_days derived numeric column, count_col norm_col columns supplied within input data object.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/period_averager.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain period midpoints and average daily rates for count data — period_averager","text":"","code":"set.seed(666) data <- data.frame(disease = \"senioritis\"  , period_start_date = seq(as.Date(\"2023-04-03\"), as.Date(\"2023-06-05\"), by = 7)  , period_end_date = seq(as.Date(\"2023-04-09\"), as.Date(\"2023-06-11\"), by = 7)  , cases_this_period = sample(0:100, 10, replace = TRUE)  , location = \"college\" )  period_averager(data, keep_raw = TRUE, keep_cols = c(\"disease\", \"location\")) #>    period_start_date period_end_date cases_this_period    disease location year #> 1         2023-04-03      2023-04-09                61 senioritis  college 2023 #> 2         2023-04-10      2023-04-16                95 senioritis  college 2023 #> 3         2023-04-17      2023-04-23                10 senioritis  college 2023 #> 4         2023-04-24      2023-04-30                27 senioritis  college 2023 #> 5         2023-05-01      2023-05-07                13 senioritis  college 2023 #> 6         2023-05-08      2023-05-14                 4 senioritis  college 2023 #> 7         2023-05-15      2023-05-21                11 senioritis  college 2023 #> 8         2023-05-22      2023-05-28                32 senioritis  college 2023 #> 9         2023-05-29      2023-06-04                49 senioritis  college 2023 #> 10        2023-06-05      2023-06-11                 2 senioritis  college 2023 #>    num_days     period_mid_time period_mid_date daily_rate #> 1         7 2023-04-06 12:00:00      2023-04-06  8.7142857 #> 2         7 2023-04-13 12:00:00      2023-04-13 13.5714286 #> 3         7 2023-04-20 12:00:00      2023-04-20  1.4285714 #> 4         7 2023-04-27 12:00:00      2023-04-27  3.8571429 #> 5         7 2023-05-04 12:00:00      2023-05-04  1.8571429 #> 6         7 2023-05-11 12:00:00      2023-05-11  0.5714286 #> 7         7 2023-05-18 12:00:00      2023-05-18  1.5714286 #> 8         7 2023-05-25 12:00:00      2023-05-25  4.5714286 #> 9         7 2023-06-01 12:00:00      2023-06-01  7.0000000 #> 10        7 2023-06-08 12:00:00      2023-06-08  0.2857143"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/quantile_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile Transformation — quantile_trans","title":"Quantile Transformation — quantile_trans","text":"Quantile transformation, adapted https://stackoverflow.com/questions/38874741/transform-color-scale--probability-transformed-color-distribution--scale-f","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/quantile_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile Transformation — quantile_trans","text":"","code":"quantile_trans(x)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/quantile_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile Transformation — quantile_trans","text":"x vector transformed","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/quantile_trans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile Transformation — quantile_trans","text":"scales::trans_new function","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/read_iidda_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Read IIDDA Dataset into a Dataframe — read_iidda_dataset","title":"Read IIDDA Dataset into a Dataframe — read_iidda_dataset","text":"Read IIDDA Dataset Dataframe","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/read_iidda_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read IIDDA Dataset into a Dataframe — read_iidda_dataset","text":"","code":"read_iidda_dataset(dataset_id)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/read_iidda_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read IIDDA Dataset into a Dataframe — read_iidda_dataset","text":"dataset_id ID dataset IIDDA","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/resolve_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve left_join — resolve_join","title":"Resolve left_join — resolve_join","text":"Resolves duplicate columns results left_join due shared columns data frames. Rule: Keeps old values newly joined values NA. Keeps new values otherwise (even entries empty)","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/resolve_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve left_join — resolve_join","text":"","code":"resolve_join(df)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/resolve_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve left_join — resolve_join","text":"df data frame duplicate columns ending .x .y","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/resolve_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve left_join — resolve_join","text":"data frame one remaining column duplicates","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/time_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Extent — time_extent","title":"Time Extent — time_extent","text":"Length time days representated object","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/time_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Extent — time_extent","text":"","code":"time_extent(x, time_id)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/time_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Extent — time_extent","text":"x object time_id identifier finding time axis information object","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/time_scale_picker.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Time Scale Picker — time_scale_picker","title":"Default Time Scale Picker — time_scale_picker","text":"Default Time Scale Picker","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/time_scale_picker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Time Scale Picker — time_scale_picker","text":"","code":"time_scale_picker(data)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/time_scale_picker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Time Scale Picker — time_scale_picker","text":"data Data transform.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/time_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Time units — time_units","title":"Time units — time_units","text":"Vector possible time units, derived lubridate functions","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/time_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time units — time_units","text":"","code":"time_units"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/time_units.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time units — time_units","text":"object class character length 29.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/titleize.html","id":null,"dir":"Reference","previous_headings":"","what":"Titleize — titleize","title":"Titleize — titleize","text":"Convert character vector (.e. character column) title plot.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/titleize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Titleize — titleize","text":"","code":"titleize(title_info, max_items = 3L, max_chars = 15L)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/titleize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Titleize — titleize","text":"title_info Character vector summarized title max_items TODO max_chars TODO","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/union_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Union Time Series — union_series","title":"Union Time Series — union_series","text":"Combine two time series data sets option handle overlapping time periods. particularly useful data sets come two sources (ex. LBoM RG). Assumes data sets number columns names.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/union_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union Time Series — union_series","text":"","code":"union_series(x, y, overlap = TRUE, time_variable = \"period_end_date\")"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/union_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union Time Series — union_series","text":"x first data frame containing time series data y second data frame containing time series data overlap boolean indicate `x` get priority overlapping time periods `y`. `TRUE` returned data frame contain data `x`, filtered `y` data overlap `x`. FALSE, union `x` `y` returned. time_variable column name time variable `x` `y`, default \"period_end_date\"","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/union_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union Time Series — union_series","text":"combined `x` `y` data frames optional filtering overlaps","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/unique_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unique tokens from iidda metadata — unique_entries","title":"Get unique tokens from iidda metadata — unique_entries","text":"Get unique tokens iidda metadata","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/unique_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unique tokens from iidda metadata — unique_entries","text":"","code":"unique_entries(entries, metadata_search)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/unique_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unique tokens from iidda metadata — unique_entries","text":"entries List returned iidda.api::ops_staging$metadata metadata_search Character, field unique tokens desired","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/unique_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unique tokens from iidda metadata — unique_entries","text":"Character vector unique tokens given field iidda    datasets","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/valid_time_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate time variables — valid_time_vars","title":"Validate time variables — valid_time_vars","text":"Validate variable date data type data set.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/valid_time_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate time variables — valid_time_vars","text":"","code":"valid_time_vars(var_nm, data)"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/valid_time_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate time variables — valid_time_vars","text":"var_nm string variable name data data frame","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/valid_time_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate time variables — valid_time_vars","text":"boolean validation status","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/year_end_fix.html","id":null,"dir":"Reference","previous_headings":"","what":"Year End Fix — year_end_fix","title":"Year End Fix — year_end_fix","text":"Weeks covering year end split two records. first week adjusted end day 365 (366 leap years), second week starts first day year. adapted `LBoM::edge_fix` keeps series variable value newly created weeks. seem make much difference viewing heatmap, however might make sense something sensible like dividing series variable value half allocating week half values. Weeks covering year end split two records. first week adjusted end day 365 (366 leap years), second week starts first day year. adapted `LBoM::edge_fix` keeps series variable value newly created weeks. seem make much difference viewing seasonal heatmap, however might make sense something sensible like dividing series variable value half allocating week half values.","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/year_end_fix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year End Fix — year_end_fix","text":"","code":"year_end_fix(   data,   series_variable = \"deaths\",   start_year_variable = \"Year\",   end_year_variable = \"End Year\",   start_day_variable = \"Day of Year\",   end_day_variable = \"End Day of Year\",   temp_year_variable = \"yr\" )  year_end_fix(   data,   series_variable = \"deaths\",   start_year_variable = \"Year\",   end_year_variable = \"End Year\",   start_day_variable = \"Day of Year\",   end_day_variable = \"End Day of Year\",   temp_year_variable = \"yr\" )"},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/year_end_fix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year End Fix — year_end_fix","text":"data data frame containing time series data series_variable column name series variable `data`, default \"deaths\" start_year_variable column name time variable containing year starting period, defaults \"Year\" end_year_variable column name time variable containing year ending period, defaults \"End Year\" start_day_variable column name time variable containing day starting period, defaults \"Day Year\" end_day_variable column name time variable containing day ending period, defaults \"End Day Year\" temp_year_variable temporary variable name pivoting data frame","code":""},{"path":"https://canmod.github.io/iidda-tools/iidda.analysis/reference/year_end_fix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year End Fix — year_end_fix","text":"fields `data` records corresponding year end weeks split fields `data` records corresponding year end weeks split","code":""}]
